#@ 1. เลือก "โครงตู้คอนเทนเนอร์" (Base Image)
#* เราเริ่มต้นจากตู้คอนเทนเนอร์สำเร็จรูปที่มี Node.js เวอร์ชัน 18 ติดตั้งมาให้แล้ว
#* 'alpine' คือเวอร์ชันที่เล็กและเบามาก เหมาะสำหรับใช้งานจริง (Production)
FROM node:18-alpine

#@ 2. สร้าง "พื้นที่ทำงาน" (Working Directory)
#* สร้างโฟลเดอร์ชื่อ /app ขึ้นมา "ข้างใน" ตู้คอนเทนเนอร์
#* และสั่งให้คำสั่งต่อๆ ไปทั้งหมดทำงานจากในโฟลเดอร์นี้
WORKDIR /app

#@ 3. ติดตั้ง "เครื่องมือทำครัว" (Dependencies)
#* "เคล็ดลับของ Docker": เราจะคัดลอกเฉพาะไฟล์ที่ระบุรายชื่อเครื่องมือเข้าไปก่อน
#* Docker จะจำขั้นตอนนี้ไว้ ถ้าไฟล์ 2 ตัวนี้ไม่เปลี่ยนแปลงในอนาคต Docker จะข้าม
#* การติดตั้งใหม่ทั้งหมด ทำให้การสร้างตู้ครั้งต่อไปเร็วขึ้นมาก
#* package*.json: หมายถึงไฟล์ที่ชื่อขึ้นต้นด้วย package และลงท้ายด้วย .json เช่น package.json และ package-lock.json.
#* ./ = หมายถึง โฟลเดอร์ปัจจุบันในตู้คอนเทนเนอร์ (ที่กำหนดโดย WORKDIR /app) ซึ่งเป็นตำแหน่งที่ไฟล์จะถูกคัดลอกไป
COPY package*.json ./

#* สั่งให้ npm อ่านไฟล์ package.json แล้วติดตั้ง Library ทั้งหมด (express, mongoose, etc.)
RUN npm install

#@ 4. คัดลอก "สูตรอาหาร" (Source Code)
#* หลังจากติดตั้งเครื่องมือเสร็จแล้ว เราค่อยคัดลอกโค้ดทั้งหมดของเรา
#* เช่น server.js, swaggerConfig.js) เข้าไปในโฟลเดอร์ /app
#* ตัวแรก (.): หมายถึง โฟลเดอร์ปัจจุบัน บนเครื่องของคุณ (context) ที่ใช้สร้าง Docker image.
#* ตัวที่สอง (.): หมายถึง โฟลเดอร์ปัจจุบันในตู้คอนเทนเนอร์ (ที่กำหนดโดย WORKDIR /app).
COPY . .

#@ 5. เปิด "ประตู" (Expose Port)
#* เป็นการ "ประกาศ" ให้ Docker รู้ว่าโปรแกรมข้างในตู้นี้จะเปิด "ประตู" หมายเลข 8000
#* เพื่อรอรับการติดต่อจากภายนอก (การเชื่อมประตูจริงๆ จะทำใน docker-compose.yml)
EXPOSE 8000

#@ 6. คำสั่ง "เริ่มทำงาน" (Run Command)
#* นี่คือคำสั่งสุดท้ายที่จะถูกรันทุกครั้งที่ตู้คอนเทนเนอร์นี้เริ่มทำงาน
#* มันเหมือนกับการที่เราเดินไปที่ "เตาแก๊ส" แล้วเปิดมันขึ้นมา
CMD ["node", "server.js"]

